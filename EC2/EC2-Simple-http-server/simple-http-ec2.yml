AWSTemplateFormatVersion: "2010-09-09"
Description: base http web app template

Parameters:
  SecurityGroupDescription:
    Description: Security Group Description
    Type: String
  PreferredAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: admin-key
  InstanceType:
    Type: String
    Default: t3.small
    AllowedValues: [ t3.micro, t3.small, t3.medium ]
    ConstraintDescription: Please choose a valid instance type.
  ClientIP:
    Description: Add the client for the security groups
    Type: String
    Default: 187.190.205.20/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.


Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${PreferredAMI}
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref PermissionS3BucketsInstanceProfile
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo su
          apt-get update -y
          sudo apt install -y  awscli
          sudo apt install policycoreutils -y
          apt-get install -y apache2
          sudo apt-get install unzip
          apt-get install php-pear php7.2-curl php7.2-dev php7.2-gd php7.2-mbstring php7.2-zip php7.2-mysql php7.2-xml -y
          cd /var/www
          aws s3 cp s3://my-s3-http-files/latest/my-app.zip .
          unzip my-app.zip
          cd /var/www/public_html/
          #sudo cp -r * /var/www/html
          sudo cp -r .[^.]* /var/www/html
          cd /var/www/html
          sudo a2enmod rewrite
          systemctl stop apache2.service
          systemctl start apache2.service
          systemctl enable apache2.service
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup

  # an elastic IP for our instance
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MyInstance

  # our EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: !Ref ClientIP
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22

  # our second EC2 security group
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref SecurityGroupDescription
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  #instance profile to access s3 bucket for code
  PermissionS3BucketsInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref PermissionS3Buckets
  
  PermissionS3BucketsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "PermissionS3BucketsPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
            - "s3:Get*"
            - "s3:List*"
            Resource:
            - "arn:aws:s3:::my-s3-http-files"
            - "arn:aws:s3:::my-s3-http-files/*"
      Roles: 
        - !Ref PermissionS3Buckets

  PermissionS3Buckets:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /